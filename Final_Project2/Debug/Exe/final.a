;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 1/30/2024
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;int comp = -1 , count = 0 ;
;int i = 0 ;
;unsigned char segd[10] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xd8,0x80,0x90};

	.DSEG
;// Timer 0 overflow interrupt service routine
;
;void main(void)
; 0000 0024 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0025 comp = -1;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0026 // Declare your local variables here
; 0000 0027 
; 0000 0028 // Input/Output Ports initialization
; 0000 0029 DDRA = 0xff;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002A DDRB = 0xff;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 002B DDRC = 0xff;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002C DDRD = 0xff;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 002D 
; 0000 002E PORTA = 0x00;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 002F PORTB = 0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0030 PORTC = 0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031 PORTD = 0x0F;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0032 
; 0000 0033 
; 0000 0034 
; 0000 0035 // Timer/Counter 0 initialization
; 0000 0036 // Clock source: System Clock
; 0000 0037 // Clock value: 125.000 kHz
; 0000 0038 // Mode: Normal top=0xFF
; 0000 0039 // OC0 output: Disconnected
; 0000 003A // Timer Period: 1 ms
; 0000 003B TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003C TCNT0=0x83;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003D OCR0=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003E 
; 0000 003F // Timer/Counter 1 initialization
; 0000 0040 // Clock source: System Clock
; 0000 0041 // Clock value: Timer1 Stopped
; 0000 0042 // Mode: Normal top=0xFFFF
; 0000 0043 // OC1A output: Disconnected
; 0000 0044 // OC1B output: Disconnected
; 0000 0045 // Noise Canceler: Off
; 0000 0046 // Input Capture on Falling Edge
; 0000 0047 // Timer1 Overflow Interrupt: Off
; 0000 0048 // Input Capture Interrupt: Off
; 0000 0049 // Compare A Match Interrupt: Off
; 0000 004A // Compare B Match Interrupt: Off
; 0000 004B TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 004C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004D TCNT1H=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 004E TCNT1L=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004F ICR1H=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0050 ICR1L=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0051 OCR1AH=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0052 OCR1AL=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0053 OCR1BH=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0054 OCR1BL=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0055 
; 0000 0056 // Timer/Counter 2 initialization
; 0000 0057 // Clock source: System Clock
; 0000 0058 // Clock value: Timer2 Stopped
; 0000 0059 // Mode: Normal top=0xFF
; 0000 005A // OC2 output: Disconnected
; 0000 005B ASSR=0<<AS2;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 005C TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 005D TCNT2=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 005E OCR2=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 005F 
; 0000 0060 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0061 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0062 
; 0000 0063 // External Interrupt(s) initialization
; 0000 0064 // INT0: Off
; 0000 0065 // INT1: Off
; 0000 0066 // INT2: Off
; 0000 0067 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0068 MCUCSR=(0<<ISC2);
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0069 
; 0000 006A // USART initialization
; 0000 006B // USART disabled
; 0000 006C UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 006D 
; 0000 006E // Analog Comparator initialization
; 0000 006F // Analog Comparator: Off
; 0000 0070 // The Analog Comparator's positive input is
; 0000 0071 // connected to the AIN0 pin
; 0000 0072 // The Analog Comparator's negative input is
; 0000 0073 // connected to the AIN1 pin
; 0000 0074 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0075 SFIOR=(0<<ACME);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0076 
; 0000 0077 // ADC initialization
; 0000 0078 // ADC disabled
; 0000 0079 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 007A 
; 0000 007B // SPI initialization
; 0000 007C // SPI disabled
; 0000 007D SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 007E 
; 0000 007F // TWI initialization
; 0000 0080 // TWI disabled
; 0000 0081 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0082 
; 0000 0083 // Alphanumeric LCD initialization
; 0000 0084 // Connections are specified in the
; 0000 0085 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0086 // RS - PORTA Bit 0
; 0000 0087 // RD - PORTA Bit 1
; 0000 0088 // EN - PORTA Bit 2
; 0000 0089 // D4 - PORTA Bit 4
; 0000 008A // D5 - PORTA Bit 5
; 0000 008B // D6 - PORTA Bit 6
; 0000 008C // D7 - PORTA Bit 7
; 0000 008D // Characters/line: 16
; 0000 008E lcd_init(16);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 008F 
; 0000 0090 // Global enable interrupts
; 0000 0091 #asm("sei")
;PCODE: $00000056 VOL: 0
	sei
;PCODE: $00000057 VOL: 0
; 0000 0092 i++;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0093 while (comp == -1)
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0094       {
; 0000 0095         PORTC=~segd[i] ;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0096         PORTB=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0097         comp = 100;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0098 
; 0000 0099       // Place your code here
; 0000 009A 
; 0000 009B       }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 009C 
; 0000 009D 
; 0000 009E }
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00A0 {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00A1 // Reinitialize Timer 0 value
; 0000 00A2 TCNT0=0x83;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00A3 count++;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00A4 // Place your code here
; 0000 00A5     if (count == comp){
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A6         PORTB=0x01;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A7         count = 0;
;PCODE: $00000079 VOL: 0
; 0000 00A8         comp = -1;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00A9         main();
;PCODE: $0000007C VOL: 0
; 0000 00AA     }
; 0000 00AB }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;
